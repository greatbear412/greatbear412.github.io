---
layout: post
title: Python
tags: [Python]
---
## 基础 ##
1. python使用 **缩进** 组织代码块
2. **字符** 编码问题：计算机只能识别数字，看不懂字符串，所以字符串需要转换为数字，这就是编码。在最初，计算机设计为8个比特（bit）为一个字节（byte），所以1个字节最大显示整数为255（二进制的11111111 = 十进制的255）。ASCII只收录了大小写英文字母，数字，一些符号，没超过255个，所以1个字节也就够了。但是中文太多了，1个字节不够啊，所以需要2个字节。2个字节最大能显示整数为65535。
>ASCII:美国佬自己用的初代编码，1个字节
GB2312：中文编码

这一个国家一个版本，谁受得了？所以出现了大一统版：Unicode。
>Unicode：统一了各国各版本的编码，但比较长，通常为2个字节

但Unicode相比ASCII多了一倍的存储空间啊，这就有了进化版：UTF-8。它会根据不同的数字大小编码成1-6个字节，很机智
>UTF-8:“可变长编码”，1-6个字节。完全包含了ASCII，所以采用ASCII编码的软件在UTF-8下可正常工作。

那么总结一下：计算机在存储和传输时，一般采用UTF-8；其余使用Unicode。举个例子：
>从硬盘读取ABC.text时，将UTF-8转换为Unicode保存到内存里；编辑完保存时，再转换回去。
服务器把网页转换为UTF-8传送到浏览器。

Python采用Unicode编码，可以使用```ord（）```获取它的整数表示，```chr（）```把编码转换为对应字符。也可以用```X.encode(编码格式)```将其转换为对应格式的字符，对应的有```decode```。
字符串是```str```类型，传输或保存时，要转化为以字节为单位的```bytes```类型。当我们从网络或文件读取的是字节流时，也要把之转换回来。
Python对bytes类型的数据前面加b以及引号显示：```X=b'ABC'```。这和```X=ABC```是不同的。前加b不会自动将str转换为bytes，你需要用encode。
忽略转码时的部分错误：```xxx.decode('utf-8',errors='ignore')```

占位符：%。  ```'%.10f' % r``` 10位小数的r 。  需要显示%:用%转义，即%%
>%s:字符串。全能。
%d:整数
%f:浮点
%x:十六进制整数

3. 数据类型: **list** 数组，用[]声明。有append，pop，insert等方法。
 **tuple** 元祖。用()声明。指向不变。仅是指向。 如```a = (a,b,[x,y])，[x,y]的x和y是可变的。但a还是个tuple```。

4. if和elif和else
5. int（）等内置函数。定义函数：def。返回多值时，实际上返回的是tuple。
函数参数规则如下：
```
可变参数：def func（\*arg）,接收的是一个tuple。调用参数时可以直接写，会转换为tuple，也可以在list和tuple前加*也会将包含元素当作可变参数挨个传入。
关键字参数：接收的是一个dict。调用时可传入任意不受限制等参数。可直接传，也可以传一个dict。函数内部对于这些参数来作审查。
def func（arg1,arg2,**arg）:
    if 'job' in arg:
        xxx
非可变\关键字参数，要么定义时有默认值，要么调用时传值。
命名关键字参数：限制关键字参数等名字。以*号分割，或前面出现了可变参数。
def func（arg1,arg2,*,age,job）:
def func（title,name,\*arg,age=‘18’,job）：这里的age和job是命名的，调用时必须指定！
```
定义时，必须遵守（位置参数，默认参数，可变参数，关键字参数，命名关键字参数）的顺序！
6. for in，while
7. dict：类比js里的对象；set，类比ES6的set。 这俩区别：set无value，且自动过滤重复元素
8. pass：啥也不干。占位符。
