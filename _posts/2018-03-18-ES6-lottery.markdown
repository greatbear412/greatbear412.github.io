---
layout: post
title: ES6彩票项目小记
tags: [ES6,lottery,模块化]
---
# **前期** #
环境搭建困扰了不少时间，网上教程很多已经跟不上版本了，以后再搭建环境时要先看这一点，省去不必要的时间浪费。
接触了Webpack和gulp，简直不要太方便，日后要多用这些，熟练之后必会受益良多。

# **模块化** #
前期工作完成后，就要开始写代码了。第一次比较完整的使用模块化的思想，一开始还是有很多困惑的，比如数据怎么保存？怎么交换？各个模块要怎么划分？考虑到模块之间的交互时，每个模块要接收的参数、return的结果，用什么数据类型？
后来学到，是用新建一个对象来完成绝大部分的工作，数据保存在辣个对象的属性里，用`this.data`来增查改删。

那模块的方法怎么调用呢？之前都是直接绑在DOM元素上了。现在需要先分成多个“大块儿”，每个“大块儿”里再填充各个“小块儿”。
比如这个项目里涉及到中奖、注数、机选等和“计算”有关的，就把这些方法都放在一个“Calculate.js”里，这就是一个“模块”。那么第一步就是先分好各个模块。
```
--JS
  -Calculate.js
  -Interface.js
  -Timer.js
  -Base.js
```
接下来是各个api。这一步我都是分成三部分：参数，逻辑，返回值。考虑好大致逻辑后，需要什么参数就知道了，可能还需要回去修改一下辣个对象的属性，这里选择什么数据结构很重要。

api里经常需要保存`this`。关于this，再复习一遍吧：this指向调用该函数的对象，如果没有对象调用，严格模式下this指向undefined，非严格模式下指向window。因此函数里嵌套函数时，要特别注意这一点。

ES6中新增了`Map`和`Set`，Map更为方便，Set有数据唯一性。但这两个数据结构的增查改删方法和数组不一样，在写api时要注意。
最后的return也一样，保持各模块间的数据格式一致才能不出bug。

各个js文件由一个class构成，各个api写在这个class里，最后统一继承给辣个对象。class的特性在<a href='https://github.com/greatbear412/Lottery-ES6/tree/master/class'>这里</a>。

模板字符串、默认参数、扩展运算符等，写的时候就会感受到相比ES5会省下很多工夫。记得有一次用“+”、“'”拼接带变量的东西时费了老半天劲不知道bug出在哪……

最后，把模块继承好，给几个按钮、选项绑定好事件，就基本完工了。

